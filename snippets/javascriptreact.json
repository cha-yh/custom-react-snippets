{
	"Set reducer and action": {
		"prefix": "ra",
		"body": [
			"const ${1} = '$TM_FILENAME_BASE/${1}';",
			"export const ${2} = createAction(${1});",
			"const ${2}Action = (state, action) => {",
			"\treturn {",
			"\t\t${3}: action.payload",
			"\t}",
			"}",
			"//[${1}]: ${2}Action"
		],
		"description": "[REDUX] set reducer and action"
	},

	"Set reducer and action for pender": {
		"prefix": "rap",
		"body": [
			"const ${1} = '$TM_FILENAME_BASE/${1}';",
			"export const ${2} = createAction(${1}, ${3:${2}});",
			"const ${2}Action = {",
			"\ttype: ${1},",
			"\tonSuccess: (state, action) => {",
			"\t\treturn {",
			"\t\t\t...state,",
			"\t\t\t${4}: action.payload",
			"\t\t}",
			"\t},",
			"\tonFailure: (state, action) => {",
			"\t\treturn {",
			"\t\t\t...state,",
			"\t\t\t${4}: initialState.${4}",
			"\t\t}",
			"\t}",
			"}",
			"//...pender(${2}Action)"
		],
		"description": "[REDUX] set reducer and action for pender"
	},

	"Set redux module groundwork": {
		"prefix": "rmg",
		"body": [
			"import { createAction, handleActions } from 'redux-actions';",
			"import { pender } from 'redux-pender';",
			"",
			"const initialState = {",
			"\t",
			"};",
			"",
			"${1}",
			"",
			"/*",
			"\tHANDLE ACTIONS",
		  	"*/",
			"export default handleActions({",
			"\t",
			"}, initialState);",
		],
		"description": "[REDUX] set redux module's groundwork"
	},

	// rsx
	"Set div with cx": {
		"prefix": "dcxc",
		"body": [
			"<div className={cx('${1}')}>",
            "\t",
			"</div>"
		],
		"description": "[RSX] set dix with classnames style"
	},
	"Set cx": {
		"prefix": "cxc",
		"body": [
			"className={cx('${1}')}"
		],
		"description": "[RSX] set classnames style"
	},

	"Set react form container": {
		"prefix": "rfc",
		"body": [
			"import React, { Component } from 'react';",
			"import {mkError, mkHasError} from 'lib/errorChecker';",
			"",
			"// hoc",
			"import { compose } from 'recompose';",
			"import { withRouter } from 'react-router-dom';",
			"import { injectIntl } from 'react-intl';",
			"",
			"// redux",
			"import {connect} from 'react-redux';",
			"import {bindActionCreators} from 'redux';",
			"",
			"const validationOption = {",
			"\tform1: {",
			"\t\trequire: true,",
			"\t\ttype: 'text',",
			"\t},",
			"",
			"}",
			"",
			"class $TM_FILENAME_BASE extends Component {",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t\tthis.${1} = this.${1}.bind(this);",
			"\t\tthis.handleChange = this.handleChange.bind(this);",
			"\t\tthis.state = {",
			"\t\t\tform: {},",
			"\t\t\terror: {},",
			"\t\t\thasError: true, ",
			"\t\t}",
			"\t}",
			"",
			"\tstatic getDerivedStateFromProps(nextProps, prevState) {",
			"\t\tconst error = mkError(prevState.form, validationOption);",
			"\t\tconst hasError = mkHasError(prevState.form, validationOption);",
			"\t\treturn {",
			"\t\t\terror,",
			"\t\t\thasError,",
			"\t\t}",
			"\t}",
			"\t",
			"\t",
			"\t${1} = async() => {",
			"\t\tif(!this.state.hasError) {",
			"\t\t\t// await this.props.@@Actions.@@@(this.state.form);",
			"\t\t}",
			"\t\tif(this.props.registBuyer.success) {",
			"\t\t\tconsole.log('success!');",
			"\t\t\t// put actions after success",
			"\t\t} else {",
			"\t\t\tconsole.log('got errors');",
			"\t\t\t// put actions after fail",
			"\t\t}",
			"\t}",
			"",
			"\thandleChange(name, value) {",
			"\t\tthis.setState({",
			"\t\t\tform: {",
			"\t\t\t\t...this.state.form,",
			"\t\t\t\t[name]: value",
			"\t\t\t}",
			"\t\t});",
			"\t}",
			"",
			"\trender() {",
			"\t\tconst {form, error} = this.state;",
			"\t\treturn (",
			"\t\t\t<Form1",
			"\t\t\t\tform = {form}",
			"\t\t\t\terror = {error}",
			"\t\t\t\thandleChange = {this.handleChange}",
			"\t\t\t\tvalidationOption = {validationOption}",
			"\t\t\t/>",
			"\t\t);",
			"\t}",
			"}",
			"let mapStateToProps = (state) => {",
			"\treturn {",
			"",
			"\t}",
			"}",
			"let mapDispatchToProps = (dispatch) => {",
			"\treturn {",
			"",
			"\t}",
			"}",
			"export default compose(",
			"\twithRouter,",
			"\tinjectIntl,",
			"\tconnect(mapStateToProps, mapDispatchToProps)",
			")($TM_FILENAME_BASE);",
		]
	},

	"Set input module": {
		"prefix": "ip",
		"body": [
			"<${3:Input}",
			"\tname='${1}'",
			"\tlabel='${2}'",
			"\tvalue={form.${1}}",
			"\terror={error.${1}}",
			"\tonChange={handleChange} ",
			"\trequire={validationOption.${1}.require}",
			"\ttype={validationOption.${1}.type}",
			"\tplaceholder='Enter ${2}'",
			"/>"
		]
	}
}